{"version":3,"file":"Draggable.svelte","sources":["Draggable.svelte"],"sourcesContent":["<script lang=\"ts\">;\n;\n;\nimport { PIN_INPUT, PIN_OUTPUT } from \"@ide/models/Pin\";\nimport { drawnConnection, connections } from \"@ide/store\";\nimport { GenerateGUID } from \"@ide/utils/random\";\nimport { onMount } from \"svelte\";\nimport { derived, get } from \"svelte/store\";\n;\nconst snapping = 1;\nexport let tile;\nexport let scaling = 1;\nexport let offsetX = 0;\nexport let offsetY = 0;\nlet self;\nlet dragging = false;\nlet startX = 0;\nlet startY = 0;\nlet startPageX = 0;\nlet startPageY = 0;\nconst pinBindings = {};\nonMount(() => {\n    // TODO Make not ugly\n    self.ide_component = tile;\n    tile.update((t) => {\n        return {\n            ...t,\n            metadata: {\n                ...t.metadata,\n                component: self,\n                pinComponents: pinBindings,\n            },\n        };\n    });\n});\nfunction handleDragStart(event) {\n    dragging = true;\n    startX = event.clientX - self.offsetLeft;\n    startY = event.clientY - self.offsetTop;\n    startPageX = event.pageX;\n    startPageY = event.pageY;\n}\nfunction handleMouseMove(event) {\n    if (dragging) {\n        const newX = startPageX - startX + ((event.pageX - startPageX) / scaling);\n        const newY = startPageY - startY + ((event.pageY - startPageY) / scaling);\n        tile.update((t) => {\n            return {\n                ...t,\n                metadata: {\n                    ...t.metadata,\n                    position: {\n                        x: newX - (newX % snapping),\n                        y: newY - (newY % snapping),\n                    },\n                },\n            };\n        });\n    }\n}\nfunction drawConnection(pin) {\n    const connection = {\n        metadata: {\n            id: GenerateGUID(),\n        },\n    };\n    if (pin.position === PIN_OUTPUT) {\n        connection.sourceTile = {\n            tile,\n            pin,\n        };\n    }\n    else {\n        connection.targetTile = {\n            tile,\n            pin,\n        };\n    }\n    drawnConnection.set(connection);\n    tile.update((t) => {\n        return {\n            ...t,\n            metadata: {\n                ...t.metadata,\n                pinConnections: {\n                    ...t.metadata.pinConnections,\n                    [pin.name]: connection,\n                },\n            },\n        };\n    });\n}\nfunction releaseMouse(pin) {\n    // TODO Remove cast on svelte version >= 3.30\n    const connection = get(drawnConnection);\n    if (!connection) {\n        return;\n    }\n    if (connection.sourceTile && pin.position === PIN_INPUT) {\n        connection.targetTile = {\n            tile,\n            pin,\n        };\n    }\n    else if (connection.targetTile && pin.position === PIN_OUTPUT) {\n        connection.sourceTile = {\n            tile,\n            pin,\n        };\n    }\n    drawnConnection.set(undefined);\n    if (connection.sourceTile && connection.targetTile) {\n        connections.add(connection);\n        tile.update((t) => {\n            return {\n                ...t,\n                metadata: {\n                    ...t.metadata,\n                    pinConnections: {\n                        ...t.metadata.pinConnections,\n                        [pin.name]: connection,\n                    },\n                },\n            };\n        });\n    }\n    else {\n        const otherTile = connection.sourceTile || connection.targetTile;\n        otherTile.tile.update((t) => {\n            return {\n                ...t,\n                metadata: {\n                    ...t.metadata,\n                    pinConnections: {\n                        ...t.metadata.pinConnections,\n                        [otherTile.pin.name]: undefined,\n                    },\n                },\n            };\n        });\n    }\n}\n</script>\n\n<style lang=\"scss\">.Draggable {\n  width: 400px;\n  position: absolute;\n  user-select: none;\n  cursor: auto;\n}\n.Draggable.Dragging {\n  z-index: 1;\n}\n.Draggable.Dragging .Header {\n  cursor: grabbing;\n}\n.Draggable .Header {\n  background: #ab400d;\n  cursor: grab;\n  padding: 10px;\n}\n.Draggable .Body {\n  background: #171717;\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  padding: 10px;\n}\n.Draggable .Body .Inputs, .Draggable .Body .Outputs {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  gap: 10px;\n  align-items: flex-start;\n}\n.Draggable .Body .Outputs {\n  align-items: flex-end;\n}\n.Draggable .Body .Outputs .Point {\n  margin-right: 0;\n  margin-left: 5px;\n}\n.Draggable .Body .Pin {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  line-height: 15px;\n  cursor: pointer;\n}\n.Draggable .Body .Pin .Point {\n  width: 12px;\n  height: 12px;\n  border-radius: 12px;\n  border: 2px solid white;\n  margin-right: 5px;\n}\n.Draggable .Metadata {\n  background: #2e1111;\n  padding: 10px;\n}</style>\n\n<svelte:window\n  on:mousemove={handleMouseMove}\n  on:mouseup={() => (dragging = false)} />\n\n<div\n  class=\"Draggable panzoom-exclude\"\n  style=\"top: {$tile.metadata.position.y}px; left: {$tile.metadata.position.x}px\"\n  bind:this={self}\n  class:Dragging={dragging === true}>\n  <div class=\"Header\" on:mousedown={handleDragStart}>\n    <span>{$tile.definition.name}</span>\n  </div>\n  <div class=\"Body\">\n    <div class=\"Inputs\">\n      {#each Object.entries($tile.definition.pins) as [name, pin], i}\n        {#if pin.position === PIN_INPUT}\n          <div\n            class=\"Pin\"\n            on:mousedown={() => drawConnection(pin)}\n            on:mouseup={() => releaseMouse(pin)}>\n            <div bind:this={pinBindings[pin.name]} class=\"Point\" />\n            <span>{pin.name}</span>\n          </div>\n        {/if}\n      {/each}\n    </div>\n    <div class=\"Outputs\">\n      {#each Object.entries($tile.definition.pins) as [name, pin], i}\n        {#if pin.position === PIN_OUTPUT}\n          <div\n            class=\"Pin\"\n            on:mousedown={() => drawConnection(pin)}\n            on:mouseup={() => releaseMouse(pin)}>\n            <span>{pin.name}</span>\n            <div bind:this={pinBindings[pin.name]} class=\"Point\" />\n          </div>\n        {/if}\n      {/each}\n    </div>\n  </div>\n  <div class=\"Metadata\">\n    <span>ID: {$tile.metadata.id}</span><br />\n    <span>Position: X: {$tile.metadata.position.x}, Y: {$tile.metadata.position.y}</span>\n  </div>\n</div>\n"],"names":[],"mappings":"AAgJmB,UAAU,0BAAC,CAAC,AAC7B,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,UAAU,SAAS,0BAAC,CAAC,AACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,UAAU,sBAAS,CAAC,OAAO,aAAC,CAAC,AAC3B,MAAM,CAAE,QAAQ,AAClB,CAAC,AACD,uBAAU,CAAC,OAAO,aAAC,CAAC,AAClB,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,uBAAU,CAAC,KAAK,aAAC,CAAC,AAChB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,cAAc,CAAE,GAAG,CACnB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,uBAAU,CAAC,KAAK,CAAC,oBAAO,CAAE,uBAAU,CAAC,KAAK,CAAC,QAAQ,aAAC,CAAC,AACnD,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,cAAc,CAAE,MAAM,CACtB,GAAG,CAAE,IAAI,CACT,WAAW,CAAE,UAAU,AACzB,CAAC,AACD,uBAAU,CAAC,KAAK,CAAC,QAAQ,aAAC,CAAC,AACzB,WAAW,CAAE,QAAQ,AACvB,CAAC,AACD,uBAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,aAAC,CAAC,AAChC,YAAY,CAAE,CAAC,CACf,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,uBAAU,CAAC,KAAK,CAAC,IAAI,aAAC,CAAC,AACrB,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,uBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,aAAC,CAAC,AAC5B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,uBAAU,CAAC,SAAS,aAAC,CAAC,AACpB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,AACf,CAAC"}