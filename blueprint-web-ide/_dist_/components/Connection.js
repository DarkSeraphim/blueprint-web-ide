import './Connection.css.proxy.js';
/* src/components/Connection.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_style,
	subscribe,
	svg_element
} from "../../../web_modules/svelte/internal.js";

function create_else_block(ctx) {
	let path;
	let path_d_value;

	return {
		c() {
			path = svg_element("path");
			attr(path, "d", path_d_value = "M 3 3\n        Q " + /*$bounds*/ ctx[1].width / 2 + " 3 " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + " \n        M " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + "  \n        Q " + /*$bounds*/ ctx[1].width / 2 + " " + (/*$bounds*/ ctx[1].height - 3) + " " + (/*$bounds*/ ctx[1].width - 3) + " " + (/*$bounds*/ ctx[1].height - 3));
			attr(path, "stroke", "red");
			attr(path, "stroke-width", "5");
			set_style(path, "stroke-linecap", "round");
			set_style(path, "stroke-linejoin", "round");
			attr(path, "fill", "none");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$bounds*/ 2 && path_d_value !== (path_d_value = "M 3 3\n        Q " + /*$bounds*/ ctx[1].width / 2 + " 3 " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + " \n        M " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + "  \n        Q " + /*$bounds*/ ctx[1].width / 2 + " " + (/*$bounds*/ ctx[1].height - 3) + " " + (/*$bounds*/ ctx[1].width - 3) + " " + (/*$bounds*/ ctx[1].height - 3))) {
				attr(path, "d", path_d_value);
			}
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

// (20:4) {#if $bounds.swap}
function create_if_block(ctx) {
	let path;
	let path_d_value;

	return {
		c() {
			path = svg_element("path");
			attr(path, "d", path_d_value = "M " + (/*$bounds*/ ctx[1].width - 3) + " 3\n        Q " + /*$bounds*/ ctx[1].width / 2 + " 3 " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + " \n        M " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + "  \n        Q " + /*$bounds*/ ctx[1].width / 2 + " " + (/*$bounds*/ ctx[1].height - 3) + " 3 " + (/*$bounds*/ ctx[1].height - 3));
			attr(path, "stroke", "red");
			attr(path, "stroke-width", "5");
			set_style(path, "stroke-linecap", "round");
			set_style(path, "stroke-linejoin", "round");
			attr(path, "fill", "none");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$bounds*/ 2 && path_d_value !== (path_d_value = "M " + (/*$bounds*/ ctx[1].width - 3) + " 3\n        Q " + /*$bounds*/ ctx[1].width / 2 + " 3 " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + " \n        M " + /*$bounds*/ ctx[1].width / 2 + " " + /*$bounds*/ ctx[1].height / 2 + "  \n        Q " + /*$bounds*/ ctx[1].width / 2 + " " + (/*$bounds*/ ctx[1].height - 3) + " 3 " + (/*$bounds*/ ctx[1].height - 3))) {
				attr(path, "d", path_d_value);
			}
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let svg;
	let svg_viewBox_value;

	function select_block_type(ctx, dirty) {
		if (/*$bounds*/ ctx[1].swap) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			if_block.c();
			attr(svg, "width", "100%");
			attr(svg, "height", "100%");
			attr(svg, "viewBox", svg_viewBox_value = "0 0 " + /*$bounds*/ ctx[1].width + " " + /*$bounds*/ ctx[1].height);
			attr(div, "class", "Connection svelte-genuzz");
			set_style(div, "color", "red");
			set_style(div, "top", /*$bounds*/ ctx[1].y + "px");
			set_style(div, "left", /*$bounds*/ ctx[1].x + "px");
			set_style(div, "width", /*$bounds*/ ctx[1].width + "px");
			set_style(div, "height", /*$bounds*/ ctx[1].height + "px");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg);
			if_block.m(svg, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(svg, null);
				}
			}

			if (dirty & /*$bounds*/ 2 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*$bounds*/ ctx[1].width + " " + /*$bounds*/ ctx[1].height)) {
				attr(svg, "viewBox", svg_viewBox_value);
			}

			if (dirty & /*$bounds*/ 2) {
				set_style(div, "top", /*$bounds*/ ctx[1].y + "px");
			}

			if (dirty & /*$bounds*/ 2) {
				set_style(div, "left", /*$bounds*/ ctx[1].x + "px");
			}

			if (dirty & /*$bounds*/ 2) {
				set_style(div, "width", /*$bounds*/ ctx[1].width + "px");
			}

			if (dirty & /*$bounds*/ 2) {
				set_style(div, "height", /*$bounds*/ ctx[1].height + "px");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $bounds,
		$$unsubscribe_bounds = noop,
		$$subscribe_bounds = () => ($$unsubscribe_bounds(), $$unsubscribe_bounds = subscribe(bounds, $$value => $$invalidate(1, $bounds = $$value)), bounds);

	$$self.$$.on_destroy.push(() => $$unsubscribe_bounds());
	
	let { bounds } = $$props;
	$$subscribe_bounds();

	$$self.$$set = $$props => {
		if ("bounds" in $$props) $$subscribe_bounds($$invalidate(0, bounds = $$props.bounds));
	};

	return [bounds, $bounds];
}

class Connection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { bounds: 0 });
	}
}

export default Connection;
//# sourceMappingURL=Connection.js.map
