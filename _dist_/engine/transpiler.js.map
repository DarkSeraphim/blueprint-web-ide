{
  "version": 3,
  "sources": ["/home/runner/work/blueprint-web-ide/blueprint-web-ide/src/engine/transpiler.ts"],
  "sourcesContent": ["import { get, Readable } from \"svelte/store\"\nimport { tiles } from \"@ide/store\"\nimport { GetLanguageTileDefinition } from \"@ide/models/LanguageTileDefinition\";\nimport type { Tile } from \"@ide/models/Tile\";\nimport { PIN_INPUT } from \"@ide/models/Pin\";\n\nconst language = \"javascript\";\n\nexport const Compile = (): string => {\n  // TODO Remove cast on svelte version >= 3.30\n  const allTiles = get(tiles) as any;\n  const values = Object.values(allTiles);\n\n  if (values.length < 1) {\n    return \"\"\n  }\n\n  // TODO Remove cast on svelte version >= 3.30\n  return TranspileTile(get(values[0] as Readable<Tile>));\n}\n\nconst TranspileTile = (tile: Tile): string => {\n  let result = \"\";\n\n  console.log(tile);\n  const languageTile = GetLanguageTileDefinition(language, tile.definition.name)!;\n  const definition = languageTile.definition\n\n  if (typeof (definition) === \"string\") {\n    result = definition;\n  } else if (typeof (definition) === \"function\") {\n    // TODO Context\n    result = definition();\n  } else {\n    throw Error(\"Unknown language tile definition type: \" + typeof (definition))\n  }\n\n  // TODO Optimize if possible\n  if (tile.metadata.pinConnections) {\n    const replacements: { [key: string]: string } = {};\n    Object.entries(tile.metadata.pinConnections).forEach(([pin, connection]) => {\n      if (tile.definition.pins[pin].position === PIN_INPUT) {\n        // TODO Check for existence\n        replacements[pin] = TranspileTile(get(connection.sourceTile?.tile!));\n      }\n    });\n\n    let offset = 0;\n    for (const match of result.matchAll(/\\{\\{(\\w+?)\\}\\}/g)) {\n      if (match[1] in replacements) {\n        result = result.slice(0, match.index! + offset) + replacements[match[1]] + result.slice(match.index! + match[0].length + offset);\n        offset += replacements[match[1]].length - match[0].length;\n      }\n    }\n  }\n\n  return result;\n}"],
  "mappings": "AAAA;AACA;AACA;AAEA;AAEA,MAAM,WAAW;AAEV,aAAM,UAAU;AAErB,QAAM,WAAW,IAAI;AACrB,QAAM,SAAS,OAAO,OAAO;AAE7B,MAAI,OAAO,SAAS;AAClB,WAAO;AAAA;AAIT,SAAO,cAAc,IAAI,OAAO;AAAA;AAGlC,MAAM,gBAAgB,CAAC;AACrB,MAAI,SAAS;AAEb,UAAQ,IAAI;AACZ,QAAM,eAAe,0BAA0B,UAAU,KAAK,WAAW;AACzE,QAAM,aAAa,aAAa;AAEhC,MAAI,OAAQ,eAAgB;AAC1B,aAAS;AAAA,aACA,OAAQ,eAAgB;AAEjC,aAAS;AAAA;AAET,UAAM,MAAM,4CAA4C,OAAQ;AAAA;AAIlE,MAAI,KAAK,SAAS;AAChB,UAAM,eAA0C;AAChD,WAAO,QAAQ,KAAK,SAAS,gBAAgB,QAAQ,CAAC,CAAC,KAAK;AAC1D,UAAI,KAAK,WAAW,KAAK,KAAK,aAAa;AAEzC,qBAAa,OAAO,cAAc,IAAI,WAAW,YAAY;AAAA;AAAA;AAIjE,QAAI,SAAS;AACb,eAAW,SAAS,OAAO,SAAS;AAClC,UAAI,MAAM,MAAM;AACd,iBAAS,OAAO,MAAM,GAAG,MAAM,QAAS,UAAU,aAAa,MAAM,MAAM,OAAO,MAAM,MAAM,QAAS,MAAM,GAAG,SAAS;AACzH,kBAAU,aAAa,MAAM,IAAI,SAAS,MAAM,GAAG;AAAA;AAAA;AAAA;AAKzD,SAAO;AAAA;",
  "names": []
}
